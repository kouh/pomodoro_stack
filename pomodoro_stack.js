// Generated by CoffeeScript 1.4.0
var Task, TimerCtrl, notificateToDesktop;

angular.module('MyModule', []).filter('integer', function() {
  return function(input, num) {
    var out;
    out = (input >> 0).toString();
    while (out.length < num) {
      out = "0" + out;
    }
    return out;
  };
}).filter('range', function() {
  return function(input, total) {
    var i, _i;
    total = parseInt(total);
    for (i = _i = 0; 0 <= total ? _i < total : _i > total; i = 0 <= total ? ++_i : --_i) {
      input.push(i);
    }
    return input;
  };
});

Task = (function() {

  function Task(body) {
    this.body = body;
    this.doneCnt = 0;
    this.done = false;
    this.pomoCnt = 0;
  }

  return Task;

})();

notificateToDesktop = function(title, body, timeUpSec) {
  var notification, permission;
  if (typeof window.webkitNotifications === "undefined") {
    console.log("ブラウザがデスクトップ通知機能に対応していません。");
  }
  permission = webkitNotifications.checkPermission();
  switch (permission) {
    case 0:
      notification = webkitNotifications.createNotification("tomate.gif", title, body);
      notification.onclick = function(e) {
        return notification.cancel();
      };
      notification.show();
      if (timeUpSec > 0) {
        return setTimeout(function() {
          return notification.cancel();
        }, timeUpSec * 1000);
      }
      break;
    case 1:
      return webkitNotifications.requestPermission(function() {
        return alert("デスクトップ通知機能を設定しました");
      });
    case 2:
      return alert("デスクトップ通知機能が拒否されています");
  }
};

TimerCtrl = function($scope) {
  var currentStatus, ids, startTimer, titleTag;
  ids = [];
  currentStatus = "停止";
  $('#tasks').sortable({
    handle: '.drag',
    opacity: 0.5,
    update: function(event, ui) {
      var idStrs, oldTasks;
      idStrs = $(this).sortable("toArray");
      oldTasks = $scope.tasks;
      $scope.tasks = [];
      angular.forEach(idStrs, function(id) {
        return $scope.tasks.push(oldTasks[id.split('_')[1]]);
      });
      return $scope.$apply();
    }
  });
  $scope.tasks = [];
  $scope.time = new Date(0, 0, 0, 0, 0, 0);
  $scope.stop = function() {
    var i, _i, _len;
    for (_i = 0, _len = ids.length; _i < _len; _i++) {
      i = ids[_i];
      clearInterval(i);
    }
    ids = [];
    $scope.time = new Date(0, 0, 0, 0, 0, 0);
    return currentStatus = "停止";
  };
  $scope.startPomodoro = function(task, min, sec) {
    currentStatus = "タスク中";
    return startTimer(min, sec, function() {
      task.pomoCnt--;
      notificateToDesktop("ポモドーロ終了", "ポモドーロが終了しました。休憩時間に入ります。", 10);
      currentStatus = "小休憩";
      return startTimer(5, 0, function() {
        notificateToDesktop("休憩終了", "休憩時間が終了しました。");
        return currentStatus = "停止";
      });
    });
  };
  titleTag = $("title");
  startTimer = function(min, sec, onFinish) {
    var i, id, _i, _len;
    for (_i = 0, _len = ids.length; _i < _len; _i++) {
      i = ids[_i];
      clearInterval(i);
    }
    ids = [];
    $scope.time = new Date(0, 0, 0, 0, min, sec);
    id = setInterval(function() {
      $scope.time.setSeconds($scope.time.getSeconds() - 1);
      $scope.$apply();
      titleTag.text($scope.time.getMinutes() + ":" + $scope.time.getSeconds() + " " + currentStatus);
      if ($scope.time.getSeconds() === 0 && $scope.time.getMinutes() === 0) {
        clearInterval(id);
        ids = [];
        if (onFinish) {
          return onFinish();
        }
      }
    }, 1000);
    return ids.push(id);
  };
  $scope.getCurrentTask = function() {
    var currentTask, task, _i, _len, _ref;
    _ref = $scope.tasks;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      task = _ref[_i];
      if (!task.done) {
        return currentTask = task;
      }
    }
    return void 0;
  };
  $scope.getFinishedPomodoroCount = function() {
    var count;
    count = 0;
    angular.forEach($scope.tasks, function(task) {
      return count += task.doneCnt;
    });
    return count;
  };
  $scope.getTotalPomodoroCount = function() {
    var count;
    count = 0;
    angular.forEach($scope.tasks, function(task) {
      return count += task.pomoCnt;
    });
    return count;
  };
  $scope.addNew = function() {
    $scope.tasks.push(new Task($scope.newTaskBody));
    return $scope.newTaskBody = "";
  };
  $scope.getDoneCount = function() {
    var count;
    count = 0;
    angular.forEach($scope.tasks, function(task) {
      if (task.done) {
        return count += 1;
      }
    });
    return count;
  };
  $scope.deleteDone = function() {
    var oldTasks;
    oldTasks = $scope.tasks;
    $scope.tasks = [];
    return angular.forEach(oldTasks, function(task) {
      if (!task.done) {
        return $scope.tasks.push(task);
      }
    });
  };
  $scope.addPomodoro = function(index) {
    return $scope.tasks[index].pomoCnt++;
  };
  $scope.deletePomodoro = function(index) {
    if ($scope.tasks[index].pomoCnt > 0) {
      return $scope.tasks[index].pomoCnt--;
    }
  };
  return $scope.startPomo = function(task) {
    if (task.pomoCnt > 0) {
      return $scope.startPomodoro(task, 25, 0);
    }
  };
};
